buildscript {
    ext {
        springBootVersion = '2.3.4.RELEASE'
    }
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url  "https://dl.bintray.com/fraunhoferiosb/Maven"
        }
		maven {
			url "https://plugins.gradle.org/m2/"
		}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.bmuschko:gradle-docker-plugin:4.8.0"
		classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.11.0"
    }

}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.palantir.git-version"




group = 'com.github.pse_perma.perma'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = '1.8'
def details = versionDetails()

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url  "https://dl.bintray.com/fraunhoferiosb/Maven"
    }
}



apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

dependencies {
    implementation('de.fraunhofer.iosb.ilt:FROST-Client:0.20-SNAPSHOT')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-websocket')
    implementation('net.minidev:json-smart:2.3')
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation('org.springframework.boot:spring-boot-configuration-processor')
    testCompile "org.testcontainers:testcontainers:1.12.5"
}

docker {
    registryCredentials {
		url = 'https://index.docker.io/v1/'
        username = "$System.env.DOCKER_USERNAME"
        password = "$System.env.DOCKER_PASSWORD"
    }
}

task copyDockerFiles(type: Copy, dependsOn: 'assemble') {
    group = "Docker"
    description = "Copy Dockerfile and required data to build directory"

    from "${project.buildDir}/libs/backend-${project.version}.jar"
	rename "backend-${project.version}.jar", "backend.jar"
    from "config/servers.json"
	from(".") {
        include "upload-dir/**"
    }
    from "launch.sh"
    from "Dockerfile"
    into { "${project.buildDir}/docker" }
	
    exclude "**/*.yml"
}

task buildDockerImage(type: DockerBuildImage, dependsOn: 'copyDockerFiles') {
    description = "Package application as Docker image"
    group = "Docker"
    inputDir = project.file("$buildDir/docker")
    tags = ["fraunhoferiosb/perma:backend-${project.version}".toString(), "fraunhoferiosb/perma:backend-latest", "fraunhoferiosb/perma:backend-${details.gitHash}"]
}

task dockerPushLatestImage(type: DockerPushImage, dependsOn: 'buildDockerImage') {
    group "docker"

	imageName = "fraunhoferiosb/perma"
	tag = "backend-latest"
}

task dockerPushCurrentVersionImage(type: DockerPushImage, dependsOn: 'buildDockerImage') {
    group "docker"

	imageName = "fraunhoferiosb/perma"
	tag = "backend-$project.version"
}

task dockerPushHashImage (type: DockerPushImage, dependsOn: 'buildDockerImage') {
	group "docker"
	imageName = "fraunhoferiosb/perma"
	tag = "backend-${details.gitHash}"
}

task dockerPushImage() {
	dependsOn dockerPushLatestImage, dockerPushCurrentVersionImage, dockerPushHashImage
}





